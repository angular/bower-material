/*!
 * AngularJS Material Design
 * https://github.com/angular/material
 * @license MIT
 * v1.2.3-master-625adc5
 */
function MdProgressLinearDirective(c,u,e){var g="determinate",v="indeterminate",f="buffer",b="query",p="_md-progress-linear-disabled";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:function(e,a,r){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),n}};function n(e,r,a){var n;c(r);var t=a.hasOwnProperty("disabled"),i=u.dom.animator.toCss,s=angular.element(r[0].querySelector(".md-bar1")),o=angular.element(r[0].querySelector(".md-bar2")),d=angular.element(r[0].querySelector(".md-container"));function l(){var e=(a.mdMode||"").trim();if(e)switch(e){case g:case v:case f:case b:break;default:e=v}return e}function m(e,a){if(!t&&l()){var r=u.supplant("translateX({0}%) scale({1},1)",[(a-100)/2,a/100]),n=i({transform:r});angular.element(e).css(n)}}r.attr("md-mode",l()).toggleClass(p,t),function(){if(angular.isUndefined(a.mdMode)){var e=angular.isDefined(a.value)?g:v;r.attr("md-mode",e),a.mdMode=e}}(),a.$observe("value",function(e){var a=M(e);r.attr("aria-valuenow",a),l()!=b&&m(o,a)}),a.$observe("mdBufferValue",function(e){m(s,M(e))}),a.$observe("disabled",function(e){t=!0===e||!1===e?!!e:angular.isDefined(e),r.toggleClass(p,t),d.toggleClass(n,!t)}),a.$observe("mdMode",function(e){switch(n&&d.removeClass(n),e){case b:case f:case g:case v:d.addClass(n="md-mode-"+e);break;default:d.addClass(n="md-mode-"+v)}})}function M(e){return Math.max(0,Math.min(e||0,100))}}goog.provide("ngmaterial.components.progressLinear"),goog.require("ngmaterial.core"),MdProgressLinearDirective.$inject=["$mdTheming","$mdUtil","$log"],angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",MdProgressLinearDirective),ngmaterial.components.progressLinear=angular.module("material.components.progressLinear");